plugins {
	id 'java'

}

version = '0.1.0'
group = 'de.robadd'
sourceCompatibility = '8'

repositories {
	mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/res']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/res']
        }
    }
}

dependencies {
	implementation group: 'com.google.zxing', name: 'core', version: '3.5.0'
	implementation group: 'com.google.zxing', name: 'javase', version: '3.5.0'
	implementation group: 'org.thymeleaf', name: 'thymeleaf', version: '3.1.0.M2'
	implementation group: 'org.xhtmlrenderer', name: 'flying-saucer-pdf', version: '9.1.22'
	implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
	implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.36'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.3'
	
	testImplementation group: 'junit', name: 'junit', version: '4.13.2'
	
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.19.0'
    testImplementation group: 'org.assertj', name: 'assertj-swing-junit', version: '3.17.1'
}

task createProperties(dependsOn: processResources) {
  doLast {
    new File("$buildDir/resources/main/version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p.store w, null
    }
  }
}



classes {
    dependsOn createProperties
}

task buildTableOfContents {
	doLast {
        new File("${buildDir}/libs", "dependencies.txt").text = """{"libs":[ 
	${configurations.runtimeClasspath.collect { '"'+it.getName()+'"' }.join(',\n\t')}
]}"""
    }
}	


task publish(type: Exec) {
    workingDir "${buildDir}/libs"
    commandLine 'bash', '-c', "pscp -pw 'IY4NNJAYmQD2wR8B' test.txt web127@s193.goserver.host:/home/www/reiserdorfer-haisl.de/festivalmanager/$project.version/text.txt"
}
  
 
jar {
   // from "$buildDir/libs/lib"
    manifest {
        attributes 'Main-Class': 'de.robadd.festivalmanager.Main',
        'Class-Path': configurations.runtimeClasspath.collect { 'lib/'+it.getName() }.join(' ')
    }
}

task updaterJar(type: Jar) {
	from sourceSets.main.java.outputDir
    manifest {
        attributes 'Main-Class': 'de.robadd.festivalmanager.updater.Main',
        'Class-Path': configurations.runtimeClasspath.collect { 'lib/'+it.getName() }.join(' '),
        'Implementation-Title': 'Updater',
        'Implementation-Version': '0.0.1'
    }
    baseName 'Updater'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


task copyToLib(type: Copy) {
    into "$buildDir/libs/lib"
    from configurations.runtimeClasspath
}

build.dependsOn(copyToLib)
build.dependsOn(updaterJar)
build.dependsOn(buildTableOfContents)
	
/*
jar {
    manifest {
        attributes "Main-Class": 'de.robadd.festivalmanager.Main'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
    configurations.runtimeClasspath.collect { 
            exclude '.project'
            exclude '.classpath'
            exclude 'about.html'
            exclude 'LICENSE'
            exclude 'NOTICE'
            exclude 'LICENSE.txt'
            exclude 'NOTICE.txt'
            exclude 'META-INF/*'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/DEPENDENCIES'
    	it.isDirectory() ? it : zipTree(it) 
        }
     }
  }

*/